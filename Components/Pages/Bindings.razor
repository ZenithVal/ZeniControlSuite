@page "/Bindings"
@using Microsoft.AspNetCore.Authorization
@using ZeniControlSuite.Models
@attribute [Authorize(Roles = "Admin, Bindings")]

<PageTitle>Bindings</PageTitle>

<h1>Binding Progression Tree</h1>
<MudDivider></MudDivider>
&nbsp;

@* Information *@
<MudPaper Class="bg-transparent" Style="display: flex; flex-direction: row; align-items: center;">
    <MudAlert Dense="true" Variant="Variant.Outlined" Severity="Severity.Success">Points: @PointsService.pointsTruncated</MudAlert>
    <MudAlert Dense="true" Severity="@BindingTreesService.lastLogSeverity">Last Event: @BindingTreesService.lastLog </MudAlert>
    <MudAlert Dense="true" Severity="Severity.Info">@hoverBindingDescription </MudAlert>
</MudPaper>

&nbsp;
<MudDivider></MudDivider>
&nbsp;

<CascadingValue Value="this">
    <div style="position: relative;">
        @foreach (Binding binding in BindingTreesService.bindingsList)
        {
            string classString = "p-2; border-1";
            @if (binding.isReplacerOwned)
            {
                classString = "p-2; border-1; opacity-50";
			}
            else if (!binding.isSubPrereqMet)
            {
                classString = "p-2; border-1; opacity-25";
            }
            else if (binding.isReplaceLocked)
            {
                classString = "p-2; border-1; opacity-25";
            }


            <MudPaper Style="@($"position: absolute; left: {binding.Position.X * 110}px; top: {binding.Position.Y * 110}px; width: 180px; height: 90px; display: flex; flex-direction: row; align-items: center; z-index:5")" Class="@classString">
                <div @onmouseover="() => btnHoverShowInfo(binding)">

                    <MudText Align="Align.Left" Typo="Typo.body1" Style="position: absolute; top: 10%; left: 6%;">@binding.Name</MudText>

                    @if (binding.isLocked)
                    {
                        <div Class="bg-transparent" Style="position: absolute; left: 0; top: 0; width: 100%; height: 100%;">
                            <MudIcon Style="position: absolute; top: 50%; left: 14%;" Icon="@Icons.Material.Filled.Lock" Color="Color.Success" />
                            <MudText Style="position: absolute; top: 50%; left: 34%;" Align="Align.Left" Typo="Typo.button" Color="Color.Success">Locked</MudText>
                        </div>
                    }
                    else
                    {
                        @if (binding.isOwned && binding.CanBeLocked && BindingTreesService.padlocks.Enabled && !binding.isReplacerOwned)
                        {
                            <div Class="bg-transparent" Style="position: absolute; right: 0; top: 0; width: 50%; height: 100%;">
                                @if (BindingTreesService.padlocks.Owned < 1)
                                {
                                    <MudText Style="position: absolute; top: 50%; left: 24%;" Align="Align.Left" Typo="Typo.button">Lock</MudText>
                                }
                                else
                                {
                                    <MudText Style="position: absolute; top: 50%; left: 24%;" Align="Align.Left" Typo="Typo.button" Color="Color.Success">Lock</MudText>
                                    <MudButton Variant="Variant.Text" Style="position: absolute; width: 100%; height: 100%;" OnClick="@(() => LockBinding(binding))" Color="Color.Success"></MudButton>
                                }
                            </div>
                        }

                        @if (binding.isOwned)
                        {
                            if (binding.isParentOwned)
                            {
                                <MudText Style="position: absolute; top: 50%; Left: 12%;" Align="Align.Right" Typo="Typo.body1">Used</MudText>
                            }
                            else if (binding.CanBeSold)
                            {
                                if (!binding.CanBeLocked)
                                {
                                    <div Class="bg-transparent" Style="position: absolute; left: 0; top: 0; width: 100%; height: 100%;">
                                        <MudText Style="position: absolute; top: 50%; left: 12%;" Align="Align.Left" Typo="Typo.button" Color="Color.Info">Sell - @binding.PointValue✦</MudText>
                                        <MudButton Variant="Variant.Text" Style="position: absolute; width: 100%; height: 100%;" OnClick="@(() => SellBinding(binding))" Color="Color.Info"></MudButton>
                                    </div>
                                }
                                else
                                {
                                    <div Class="bg-transparent" Style="position: absolute; left: 0; top: 0; width: 50%; height: 100%;">
                                            <MudText Style="position: absolute; top: 50%; left: 12%;" Align="Align.Left" Typo="Typo.button" Color="Color.Info">Sell - @binding.PointValue✦</MudText>
                                            <MudButton Variant="Variant.Text" Style="position: absolute; width: 100%; height: 100%;" OnClick="@(() => SellBinding(binding))" Color="Color.Info"></MudButton>
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            if (binding.ConsumableCount != -1)
                            {
                                <div Class="bg-transparent" Style="position: absolute; left: 0; top: 0; width: 100%; height: 100%;">
                                    <MudText Style="position: absolute; top: 50%; left: 12%;" Align="Align.Left" Typo="Typo.button" Color="Color.Success">Add - @binding.PointValue✦ (@binding.ConsumableCount left)</MudText>
                                    <MudButton Variant="Variant.Text" Style="position: absolute; width: 100%; height: 100%;" Disabled="(binding.ConsumableCount < 1)" OnClick="@(() => BuyBinding(binding))" Color="Color.Success"></MudButton>
                                </div>
                            }
                            else if (!binding.isPrereqMet)
                            {
                                if (!binding.isSubPrereqMet)
                                {
                                    <div Class="bg-transparent" Style="position: absolute; left: 0; top: 0; width: 100%; height: 100%;">
                                        <MudText Style="position: absolute; top: 50%; left: 12%;" Align="Align.Left" Typo="Typo.button">Buy - @binding.PointValue✦</MudText>
                                    </div>
                                }
                                else
                                {
                                    <div Class="bg-transparent" Style="position: absolute; left: 0; top: 0; width: 100%; height: 100%;">
                                        <MudText Style="position: absolute; top: 50%; left: 12%;" Align="Align.Left" Typo="Typo.button" Color="Color.Warning">Buy - @binding.PointValue✦</MudText>
                                        <MudButton Variant="Variant.Text" Style="position: absolute; width: 100%; height: 100%;" OnClick="@(() => BuyBinding(binding))" Color="Color.Warning"></MudButton>
                                    </div>
                                }
							}
							else
							{
                                <div Class="bg-transparent" Style="position: absolute; left: 0; top: 0; width: 100%; height: 100%;">
                                    <MudText Style="position: absolute; top: 50%; left: 12%; font-size: larger;" Align="Align.Left" Typo="Typo.button" Color="Color.Success">Buy - @binding.PointValue✦</MudText>
                                    <MudButton Variant="Variant.Text" Style="position: absolute; width: 100%; height: 100%;" OnClick="@(() => BuyBinding(binding))" Color="Color.Success"></MudButton>
                                </div>
							}
                        }
                    }
                </div>
            </MudPaper>

            @*          
            @foreach (string prereq in binding.Prerequisites)
            {
                //draw lines between the binding and prereqs, behind the mudpaper
                Binding prereqBinding = BindingTreesService.bindingsList.Find(x => x.Name == prereq);
                if (prereqBinding != null)
				{
					string lineStyle = $"position: absolute; left: {binding.Position.X * 110 + 90}px; top: {binding.Position.Y * 110 + 45}px; width: {prereqBinding.Position.X * 110 + 90 - (binding.Position.X * 110 + 90)}px; height: {prereqBinding.Position.Y * 110 + 45 - (binding.Position.Y * 110 + 45)}px; border: 1px solid black; z-index: -1;";
					<div style="@lineStyle"></div>
				}
            } 
            *@
        }
        @if (BindingTreesService.padlocks.Enabled)
        {
            <MudPaper Style="@($"position: absolute; left: {BindingTreesService.padlocks.Position.X * 110}px; top: {BindingTreesService.padlocks.Position.Y * 110}px; width: 160px; height: 60px")" Class="p-2; border-1">

                <MudText Align="Align.Left" Typo="Typo.body1" Style="position: absolute; top: 10%; left: 6%;">Locks: (@BindingTreesService.padlocks.OwnedUsed) out of @BindingTreesService.padlocks.Limit</MudText>

                <div Class="bg-transparent" Style="position: absolute; left: 0; top: 0; width: 100%; height: 100%;">
                    @if (BindingTreesService.padlocks.OwnedUsed < @BindingTreesService.padlocks.Limit)
                    {
                        <MudText Style="position: absolute; top: 50%; left: 12%;" Align="Align.Left" Typo="Typo.button" Color="Color.Primary">Buy - @BindingTreesService.padlocks.Cost✦</MudText>
                        <MudButton Variant="Variant.Text" Style="position: absolute; width: 100%; height: 100%;" OnClick="@(() => BuyPadlock())" Color="Color.Primary"></MudButton>
                    }
                    else
                    {
                        <MudText Style="position: absolute; top: 50%; left: 12%;" Align="Align.Left" Typo="Typo.button" Color="Color.Success">Max Reachet</MudText>
                    }
                </div>

            </MudPaper>
		}

    </div>
</CascadingValue>

<MudImage Src="images/Bindings.png" Class="opacity-50" Style="position: absolute; right: 5%; bottom: 0%; height: 70%; z-index:0;" />
