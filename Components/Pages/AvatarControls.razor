@page "/AvatarControls"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using ZeniControlSuite.Authentication
@using ZeniControlSuite.Models
@using MudBlazor.Services
@using MudBlazor.Utilities
@attribute [Authorize(Roles = "Admin, Avatar")]

<PageTitle>Avatar Controls</PageTitle>

<h1 style="text-align: Left;">Avatar Controls:     @AvatarsService.selectedAvatar.Name </h1>
<MudDivider></MudDivider>

<br />
<br />

<AuthorizeView>
    <Authorized>

        <MudGrid Spacing="3" Justify="Justify.FlexStart">
            @if (!AvatarsService.avatarsLoaded)
            {
                <MudItem>
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </MudItem>
            }
            else
            {
                foreach (AvatarControl control in AvatarsService.selectedAvatar.Controls)
                {
                    if (!@context.User.IsInRole("Admin"))
                    {
                        bool hasRole = true;
                        foreach (string role in control.RequiredRoles)
                        {
                            if (!context.User.IsInRole(role))
                            {
                                hasRole = false;
                                continue;
                            }
                        }

                        if (!hasRole)
                        {
                            continue;
                        }
                    }

                    <MudItem>
                        <MudPaper Style="@("width: 200px; height: 270px; padding-left: 0px; padding-right: 0px; padding-top: 12px;")" Class="mt-2; justify-center; align-start; p-2; border-1">

                            <div style="posiition: absolute; width: 100%; height: 32px; background: rgba(0, 0, 0, 0.0)">
                                <MudText Typo="Typo.h6" Align="Align.Center">@control.Name</MudText>
                            </div>

                            <div style="height: 8px"></div>

                            @if (control is ContTypeButton contBut)
                            {

                            }

                            else if (control is ContTypeToggle contTog)
                            {
                                Parameter _Param = AvatarsService.selectedAvatar.Parameters[contTog.Parameter.Address];

                                <div style="width: 140px; height: 140px; margin-left:auto; margin-right:auto">
                                    @if (_Param.Value == contTog.ValueOff)
                                    {
                                        <MudButton Style="@("width: 100%; height: 100%;")" Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => ControlTogglePress(contTog))">
                                            <MudImage Src="@control.Icon" Style="width: 100%; height: 100%;" Alt="Off"></MudImage>
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Style="@("width: 100%; height: 100%;")" Variant="Variant.Filled" Color="Color.Info" OnClick="@(() => ControlTogglePress(contTog))">
                                            <MudImage Src="@control.Icon" Style="width: 100%; height: 100%;" Alt="On"></MudImage>
                                        </MudButton>
                                    }
                                </div>
                            }

                            else if (control is ContTypeRadial contRad)
                            {
                                Parameter _Param = AvatarsService.selectedAvatar.Parameters[contRad.Parameter.Address];

                                <MudPaper Style="@("margin-left:auto; margin-right:auto; width: 140px; height: 140px; padding-left: 16px;  padding-right: 16px; padding-top: 12px; opacity: 1.0;")" Class="border-1 border-secondary">
                                    <MudButton Style="@("width: 100%; height: 30px; font-size: 30")" Variant="Variant.Outlined" DropShadow="false" Color="Color.Info">@contRad.Parameter.Value</MudButton>
                                    <div style="height: 10px;" />
                                    <MudSlider Color="Color.Info" Size="Size.Large" Min="contRad.ValueMin" Max="contRad.ValueMax" Step="0.01f" Value="_Param.Value" ValueChanged="@((float value) => ControlRadialChange(contRad, value))" />
                                </MudPaper>
                            }

                            else if (control is ContTypeHSV contHSV)
                            {
                                MudColor mudColorEstimate = AvatarsService.HSVControlToMudColor(contHSV);
                                string hexColorEstimate = mudColorEstimate.ToString(MudColorOutputFormats.Hex);
                                Parameter _ParamHue = AvatarsService.selectedAvatar.Parameters[contHSV.ParameterHue.Address];
                                Parameter _ParamSat = AvatarsService.selectedAvatar.Parameters[contHSV.ParameterSaturation.Address];
                                Parameter _ParamBri = AvatarsService.selectedAvatar.Parameters[contHSV.ParameterBrightness.Address];

                                
                                <MudPaper Style="@($"margin-left:auto; margin-right:auto; width: 150px; height: 15px; padding-left: 16px; padding-right: 16px; opacity: 1.0; background-color: {hexColorEstimate}")" Class="border-1 border-secondary">
                                </MudPaper>
                                
                                <div style="width: 100%; padding-left: 28px; padding-right: 28px; background: rgba(0, 0, 0, 0.0)">
                                    <MudSlider Color="Color.Error" Size="Size.Large" Min="0.0f" Max="1.0f" Step="0.005f" Value="_ParamHue.Value" ValueChanged="@((float value) => ControlHSVChange(contHSV, HSVParamValue.Hue, value))" > Hue: @RoundFloat(_ParamHue.Value) </MudSlider>
                                    <MudSlider Color="Color.Info" Size="Size.Large" Min="0.0f" Max="1.0f" Step="0.005f" Value="_ParamSat.Value" ValueChanged="@((float value) => ControlHSVChange(contHSV, HSVParamValue.Saturation, value))"> Saturation: @RoundFloat(_ParamSat.Value) </MudSlider>

                                    @if (contHSV.InvertedBrightness)
								    {
                                        <MudSlider Color="Color.Warning" Size="Size.Large" Min="0.0f" Max="1.0f" Step="0.005f" Value="contHSV.InvertedBrightnessValue" ValueChanged="@((float value) => ControlHSVChange(contHSV, HSVParamValue.Brightness, value))"> Value: @RoundFloat(contHSV.InvertedBrightnessValue) </MudSlider>
								    }
								    else
								    {
                                        <MudSlider Color="Color.Tertiary" Size="Size.Large" Min="0.0f" Max="1.0f" Step="0.005f" Value="_ParamBri.Value" ValueChanged="@((float value) => ControlHSVChange(contHSV, HSVParamValue.Brightness, value))"> Brightness: @RoundFloat(_ParamBri.Value) </MudSlider>
								    }
                                </div>
                                   
                            }

                            else
                            {
                                <MudText Typo="Typo.caption">Unknown Type</MudText>
                            }

                        </MudPaper>
                    </MudItem>
                }
            }
        </MudGrid>

    </Authorized>
</AuthorizeView>


@code {
    public IEnumerable<MudColor> HSVPallet { get; set; } = new MudColor[]
    {
        "#ffffff", "#010000", "#ff0000", "#fffb00", "#000dff",
        "#ff00ff", "#00f7ff", "#00ff73", "#9000ff", "#ffa600",
        "#ffcc00", "#003399", "#00a2ff", "#003c80", "#800000",
        "#ffcccc", "#ffccfb", "#ff8af9", "#ff3396", "#00a128",
        "#8f8f8f", "#000d96", "#6800a8", "#ffffff", "#ffffff",
        "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff",
        "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff"
    };
}