@page "/AvatarControls"
@using Microsoft.AspNetCore.Authorization
@using ZeniControlSuite.Models;
@using MudBlazor.Services
@using MudBlazor.Utilities
@attribute [Authorize(Roles = "Admin, Avatar")]

<PageTitle>Avatar Controls</PageTitle>

<h1 style="text-align: center;">Avatar Controls</h1>
<MudDivider></MudDivider>

<br />
<br />


<MudGrid Spacing="3" Justify="Justify.FlexStart">
    @if (!AvatarsService.avatarsLoaded)
    {
        <MudItem>
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </MudItem>
    }
    else
    {
        foreach (Control control in AvatarsService.selectedAvatar.Controls)
        {
            <MudItem>
                <MudPaper Style="@("width: 200px; height: 270px")" Class="pa-2 mt-2 justify-center align-start">

                    <div style="position: absolute; width: 200px; margin-left:-8px; margin-right:auto;">
                        <MudText Typo="Typo.h6" Align="Align.Center">@control.Name</MudText>
                    </div>

                    <div style="height: 50px"></div>

                    @if (control is ContTypeButton contBut)
                    {

                    }

                    else if (control is ContTypeToggle contTog)
                    {
                        string imageSource = "images/" + contTog.Name + ".png";
                        @if (System.IO.File.Exists(imageSource))
                        {
                            <MudImage Src="@imageSource" Width="100" Height="100" />
                        }
                        
                        <div style="width: 140px; height: 140px; margin-left:auto; margin-right:auto">
                        @if (contTog.Parameter.Value == contTog.ValueOff)
                        {
                            <MudButton Style="@("width: 100%; height: 100%;")" Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => ControlTogglePress(contTog))"></MudButton>
                        }
                        else
                        {
                            <MudButton Style="@("width: 100%; height: 100%;")" Variant="Variant.Filled" Color="Color.Info" OnClick="@(() => ControlTogglePress(contTog))">+</MudButton>
                        }
                        </div>
                    }

                    else if (control is ContTypeRadial contRad)
                    {
                        <MudPaper Style="@("margin-left:auto; margin-right:auto; width: 140px; height: 140px; padding: 8px; opacity: 1.0;")" Class="border-1 border-secondary">
                            <MudButton Style="@("width: 100%; height: 40px; font-size: 25")" Variant="Variant.Outlined" DropShadow="false"  Color="Color.Info">@contRad.Parameter.Value</MudButton>
                            <div style="height: 10px;"/>
                            <MudSlider Color="Color.Info" Size="Size.Large" Min="contRad.ValueMin" Max="contRad.ValueMax" Step="0.01f" Value="contRad.Parameter.Value" ValueChanged="@((float value) => ControlRadialChange(contRad, value))" />
                        </MudPaper>
                    }

                    else if (control is ContTypeHSV contHSV)
					{
                        string hex = contHSV.targetColor.ToString(MudColorOutputFormats.Hex);
                        //hex = hex + "99";
                        <MudPaper Style="@("margin-left:auto; margin-right:auto; width: 140px; height: 140px; padding: 2px; opacity: 1.0;background-color: " + hex)">
                            @for (int i = 0; i < 2; i++) //two of them to cover the whole area
                            {
                                <MudColorPicker ShowToolbar="true" ShowAlpha="false" ShowModeSwitch="false"
                                                ThrottleInterval="100" DragEffect="@true" Elevation="8" Class="fade" Style="@("width: 100%; height 100%")"
                                                Label="ColorPicker" PickerVariant="PickerVariant.Inline" ColorPickerMode="ColorPickerMode.HSL" Palette="HSVPallet"
                                                Value="contHSV.targetColor" ValueChanged="@((MudBlazor.Utilities.MudColor color) => ControlHSVChange(contHSV, color))" />
                            }
                        </MudPaper>
					}

					else
					{
						<MudText Typo="Typo.caption">Unknown Type</MudText>
					}




                </MudPaper>
            </MudItem>
        }
    }
</MudGrid>

@code {
    public IEnumerable<MudColor> HSVPallet { get; set; } = new MudColor[]
    {
        "#ffffff", "#010000", "#ff0000", "#fffb00", "#000dff",
        "#ff00ff", "#00f7ff", "#00ff73", "#9000ff", "#ffa600",
        "#ffcc00", "#003399", "#00a2ff", "#003c80", "#800000",
        "#ffcccc", "#ffccfb", "#ff8af9", "#ff3396", "#00a128",
        "#8f8f8f", "#000d96", "#6800a8", "#ffffff", "#ffffff",
        "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff",
        "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff"
    };
}